plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
}

group = 'com.team_7'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	dependencies {
		//AWS Lambda
		implementation 'com.amazonaws:aws-lambda-java-core:1.2.2'
		implementation 'com.amazonaws:aws-lambda-java-events:3.11.1'
		runtimeOnly 'com.amazonaws:aws-lambda-java-log4j2:1.5.1'
		implementation 'com.amazonaws:aws-java-sdk-s3'
		implementation platform('software.amazon.awssdk:bom:2.17.230')
		implementation 'software.amazon.awssdk:s3'

		//kms
		implementation 'com.amazonaws:aws-java-sdk-kms:1.12.429'
		// Use ConfigurationProperties
		annotationProcessor ('org.springframework.boot:spring-boot-configuration-processor')
		//S3
		implementation ('org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE')
		// mail 전송
		implementation 'org.springframework.boot:spring-boot-starter-mail'
		// Redis
		implementation 'org.springframework.boot:spring-boot-starter-data-redis'
		// java 8이상의 날짜 시간
		implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
		// Lombok
		annotationProcessor 'org.projectlombok:lombok'
		compileOnly 'org.projectlombok:lombok'
		//Mapper
		implementation 'org.mapstruct:mapstruct:1.5.3.Final'
		annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'
		// https://mvnrepository.com/artifact/tk.mybatis/mapper
		implementation group: 'tk.mybatis', name: 'mapper', version: '4.1.5'
		//aws
		implementation 'com.amazonaws:aws-java-sdk-s3:1.12.112'
		implementation 'javax.xml.bind:jaxb-api:2.3.1'
		// openapi(swagger포함)
		implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'
		// JWT
		compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
		runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
		runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
		// Simple JPA
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		// OAuth
		implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
		// Security
		implementation 'org.springframework.boot:spring-boot-starter-security'
		testImplementation 'org.springframework.security:spring-security-test'
		// spring-boot-starter
		implementation 'org.springframework.boot:spring-boot-starter-web'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		// validation
		implementation 'org.springframework.boot:spring-boot-starter-validation'
		// MySQL DRIVER
		runtimeOnly 'com.mysql:mysql-connector-j'
		// Mockito
		testImplementation 'org.mockito:mockito-core:5.3.1'
		//QueryDsl
		implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
		annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
		annotationProcessor "jakarta.annotation:jakarta.annotation-api"
		annotationProcessor "jakarta.persistence:jakarta.persistence-api"

		//junit5
		testImplementation("org.junit.platform:junit-platform-launcher:1.5.2")
		testImplementation("org.junit.jupiter:junit-jupiter:5.5.2")

	}
}



tasks.named('test') {
	useJUnitPlatform()
}
def querydslSrcDir = 'src/main/generated'
clean {
	delete file(querydslSrcDir)
}
tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

task packageJar(type: Zip) {
	into('lib') {
		from(jar)
		from(configurations.runtimeClasspath)
	}
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

build.dependsOn packageJar

apply plugin: 'jacoco'

jacoco {
//	toolVersion = jacocoVersion
//	applyTo run
}

task codeCoverage {
	description('Code-Coverage task with jacoco plugin')
	dependsOn test, jacocoTestReport
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
}

jacocoTestReport {
	reports {
		html.required = true
		html.outputLocation = file("$project.buildDir/reports/jacoco/html")
		xml.required = true
		xml.outputLocation = file("$project.buildDir/reports/jacoco/coverage.xml")
	}

	onlyIf = { true }

	def filter = ['**/META-INF/*.*',
	]     //Has been comment out for security concern
	def javaClass = fileTree(dir: "$project.buildDir/classes/java/main", excludes: filter)
//	def kotlinClass = fileTree(dir: "$project.buildDir/classes/kotlin/main", excludes: filter)
	def source = fileTree(dir: "$project.projectDir/src/main/java", excludes: filter)

	sourceDirectories.from = files([source])
//	classDirectories.from = files([javaClass, kotlinClass])
	executionData.from = fileTree(dir: project.buildDir, includes: ['jacoco/test.exec', 'jacoco/unitTest.exec'])
}
	jacocoTestCoverageVerification {
		violationRules {
			rule {
				enabled = true // 활성화
				element = 'CLASS' // 클래스 단위로 커버리지 체크
				// includes = []

				// 라인 커버리지 제한을 80%로 설정
				limit {
					counter = 'LINE'
					value = 'COVEREDRATIO'
					minimum = 0.80
				}

				// 브랜치 커버리지 제한을 80%로 설정
				limit {
					counter = 'BRANCH'
					value = 'COVEREDRATIO'
					minimum = 0.80
				}

				// 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한합니다.
				limit {
					counter = 'LINE'
					value = 'TOTALCOUNT'
					maximum = 200
				}


				//excludes = []
			}

		}
}

dependencies {
	testImplementation 'org.projectlombok:lombok:1.18.26'
	testImplementation 'org.projectlombok:lombok:1.18.26'
}
